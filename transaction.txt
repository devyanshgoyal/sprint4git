////////////////////////////////////////////////////////////////////////////////// bean

package com.cg.ibs.accountmanagement.bean;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

@Entity
@Table(name = "Transaction")
@NamedQueries({
	@NamedQuery(name = "GET_MINI",query= "select t.transaction from AccountBean t where t.accNo = :accNo order by desc limit 10"),
	@NamedQuery(name = "GET_PERIODIC",query= "select t.transaction from AccountBean t where t.accNo =:accNo AND t.transaction.transactionDate BETWEEN :startDate AND :endDate")
})
public class TransactionBean implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "TRANS_ID", nullable = false, length = 10)
	private int transactionId;

	@Column(name = "TRANS_TYPE", nullable = false, length = 20)
	@Enumerated(EnumType.STRING)
	private TransactionType transactionType;
	
	@Column(name = "TRANS_DATE_TIME", nullable = false, length = 20)
	private LocalDateTime transactionDate;
	
	@Column(name = "AMOUNT", nullable = false, length = 10)
	private BigDecimal transactionAmount;
	
	@Column(name = "TRANS_MODE", nullable = false, length = 20)
	@Enumerated(EnumType.STRING)
	private TransactionMode transactionMode;
	
	@Column(name = "ACC_NO", nullable = false, length = 11)
	private BigInteger accountNumber;
	
	@Column(name = "TRANS_DESC", nullable = false, length = 40)
	private String transactionDescription;

	public TransactionBean(int transactionId, TransactionType transactionType, LocalDateTime transactionDate,
			BigDecimal transactionAmount, TransactionMode transactionMode, BigInteger accountNumber,
			String transactionDescription) {
		super();
		this.transactionId = transactionId;
		this.transactionType = transactionType;
		this.transactionDate = transactionDate;
		this.transactionAmount = transactionAmount;
		this.transactionMode = transactionMode;
		this.accountNumber = accountNumber;
		this.transactionDescription = transactionDescription;
	}

 

	public TransactionBean() {
		super();
		// TODO Auto-generated constructor stub
	}



	public int getTransactionId() {
		return transactionId;
	}

	public void setTransactionId(int transactionId) {
		this.transactionId = transactionId;
	}

	public TransactionType getTransactionType() {
		return transactionType;
	}

	public void setTransactionType(TransactionType transactionType) {
		this.transactionType = transactionType;
	}

	public LocalDateTime getTransactionDate() {
		return transactionDate;
	}

	public void setTransactionDate(LocalDateTime transactionDate) {
		this.transactionDate = transactionDate;
	}

	public BigDecimal getTransactionAmount() {
		return transactionAmount;
	}

	public void setTransactionAmount(BigDecimal transactionAmount) {
		this.transactionAmount = transactionAmount;
	}

	public TransactionMode getTransactionMode() {
		return transactionMode;
	}

	public void setTransactionMode(TransactionMode transactionMode) {
		this.transactionMode = transactionMode;
	}

	public BigInteger getAccountNumber() {
		return accountNumber;
	}

	public void setAccountNumber(BigInteger accountNumber) {
		this.accountNumber = accountNumber;
	}

	public String getTransactionDescription() {
		return transactionDescription;
	}

	public void setTransactionDescription(String transactionDescription) {
		this.transactionDescription = transactionDescription;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.cg.ibs.accountmanagement.bean;

public enum TransactionMode {
	ONLINE, CASH;
}

//////////////////////////////////////////////////////////////////////////////////////

package com.cg.ibs.accountmanagement.bean;

public enum TransactionType {
	CREDIT, DEBIT;
}

////////////////////////////////////////////////////////////////////////////////////////

@Override
	public BigDecimal TransferFunds(BigInteger accNo, BigDecimal amt, String tranPwd, BigInteger recipientNo) throws IBSException {
		LocalDateTime todayDate = LocalDateTime.now();
		AccountBean accountBean= accountDaoImpl.getAccountByAccNo(accNo);
		BigDecimal currentBal = accountBean.getBalance();
		if(accountBean.getAccStatus().equals(AccountStatus.CLOSED))
		{
			logger.error(IBSExceptionInt.ACCOUNT_CLOSED);
			throw new IBSException(IBSExceptionInt.ACCOUNT_CLOSED);
		}
		else if (currentBal.compareTo(amt) < 0 || amt.compareTo(new BigDecimal(0)) <= 0) {
			logger.error(IBSExceptionInt.BALANCE_ERROR_MESSAGE);
			throw new IBSException(IBSExceptionInt.BALANCE_ERROR_MESSAGE);
		} else {
			if (tranPwd.equals(accountBean.getTrans_Pwd())) {
				accountBean.setBalance(accountBean.getBalance().subtract(amt));
				TransactionBean t1 = new TransactionBean();
				t1.setAccountNumber(accNo);
				t1.setTransactionAmount(amt);
				t1.setTransactionDate(todayDate);
				t1.setTransactionDescription("Online transfer to " + recipientNo.toString());
				t1.setTransactionMode(TransactionMode.ONLINE);
				t1.setTransactionType(TransactionType.DEBIT);
				entityTransaction.begin();
				transactionDaoImpl.addNewTransaction(t1);
				accountDaoImpl.update(accountBean);
				entityTransaction.commit();
			} else {
				logger.error(IBSExceptionInt.INVALID_TRANS_PASSW);
				throw new IBSException(IBSExceptionInt.INVALID_TRANS_PASSW);
			}
		}
		logger.info(" Funds transferred succesfully");
		return currentBal;
	}